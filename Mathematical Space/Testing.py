from Structuring import *



X = Cat.Partition([5, 4, 4, 3, 3, 2, 2, 1])

Y = Cat.Partition([4, 4, 3, 1])

Z = Cat.Partition([5, 3, 1, 1])


print('OVER ALL OPERATIONS')
sp(2)
print('X:    \n',X.lst)
sp(3)
print('Y:    \n',Y.lst)
sp(3)
print('X Transpose:    \n',X.trans().lst)
sp(3)
print('Y Transpose:    \n',Y.trans().lst)
sp(3)
print('X Transpose Transpose:    \n',X.trans().trans().lst)
sp(3)
print('Y Transpose Transpose:    \n',Y.trans().trans().lst)
sp(3)
print('X<=Y:    \n',X<=Y)
sp(3)
print('Y<=X:    \n',Y<=X)
sp(3)
print('X<=Z:    \n',X<=Z)
sp(3)
print('Z<=X:    \n',Z<=X)
sp(3)
print('X<=X:    \n',X<=X)
sp(3)
print('Y<=Y:    \n',Y<=Y)
sp(3)
print('X<Y:    \n',X<Y)
sp(3)
print('Y<X:    \n',Y<X)
sp(3)
print('X<Z:    \n',X<Z)
sp(3)
print('Z<X:    \n',Z<X)
sp(3)
print('X<X:    \n',X<X)
sp(3)
print('Y<Y:    \n',Y<Y)
sp(3)
print('X:    \n',X.lst)
sp(3)
print('Y:    \n',Y.lst)
sp(3)
print('Sum:    X+Y \n',(X+Y).lst)
sp(3)
print('Diff:    X-Y \n',(X-Y).lst)
sp(3)
print('Product:    X*Y\n',(X*Y).lst)
sp(3)
print('Quotient:    X/Y\n',(X/Y).lst)
sp(3)
print('Intersect Product:    X*Y\n',(X@Y).lst)
sp(6)


print('MORE COMPLEX EXPRESSIONS')
print('(X+Y)*Z=     \n', ((X+Y)*Z).lst)
sp(2)
print('Z*(X+Y)=     \n', (Z*(X+Y)).lst)
sp(2)
print('(X*Y)+Z=     \n', ((X*Y)+Z).lst)
sp(2)
print('Z+(X*Y)=     \n', (Z+(X*Y)).lst)
sp(2)
print('X*Z + Y*Z=     \n', ((X*Z) + (Y*Z)).lst)
sp(2)
print('Z*X + Z*Y=     \n', ((Z*X) + (Z*Y)).lst)
sp(2)
print('X/X=     \n', (X/X).lst)
sp(2)
print('(X+X)/X=     \n', ((X+X)/X).lst)
sp(2)
print('Tr(X*Y)=     \n', ((X*Y).trans()).lst)
sp(2)
print('Tr(X)*Tr(Y)=     \n', ((X.trans()) * (Y.trans())).lst)
sp(2)
print('Tr(X+Y)=     \n', ((X+Y).trans()).lst)
sp(2)
print('Tr(X)+Tr(Y)=     \n', ((X.trans()) + (Y.trans())).lst)
sp(2)
print('(X/X = X-X)=     \n', (X/X == X-X))
sp(2)
print('(X/X = Y/Y)=     \n', (X/X == Y/Y))
sp(2)
print('(X/X = X)=     \n', (X/X == X))
sp(2)
print('Tr(X)+Tr(Y)=     \n', ((X.trans()) + (Y.trans())).lst)
sp(2)
print('(X*Y)/Y=     \n', ((X*Y)/Y).lst)
sp(2)
print('X=     \n', X.lst)

sp(6)
print('SUPER PRODUCT STUFF')
print('X=     \n', X.lst)
sp(2)
print('X+X=     \n', (X+X).lst)
sp(2)
print('(X+X)*X=     \n', ((X+X)*X).lst)
sp(2)
print('(X+X)*X+X=     \n', ((X+X)*X+X).lst)
sp(2)
print('((X+X)*X+X)*X=     \n', (((X+X)*X+X)*X).lst)
sp(2)

print(((X*Y)/Y).lst)

print((X*2).lst)

r = lambda n: [i+1 for i in range(n)]

cnt = []
for k in range(20):
    cnt.append(Cat.Partition(r(100)).superprod(k).lst)
    print('SP n= {}:     \n'.format(k), Cat.Partition(r(100)).superprod(k).lst)

